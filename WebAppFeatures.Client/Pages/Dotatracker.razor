@page "/dotatracker"
@using Models.DTOs
@using Models.Enums
@rendermode @(new InteractiveServerRenderMode())

<form>
    <MudGrid>
        <MudItem xs="50" sm="6" md="4">
            <MudAutocomplete T="string" label="Ваш герой" @bind-Value="value1" SearchFunc="@Search1">
            </MudAutocomplete>
        </MudItem>
        <MudItem xs="50" sm="6" md="4">
            <MudAutocomplete T="string" label="Герой оппонента" @bind-Value="value2" SearchFunc="@Search1">
            </MudAutocomplete>
        </MudItem>
        <MudButton OnClick="Parse" Variant="Variant.Filled">Найти</MudButton>
    </MudGrid>
</form>
@if (_dtos != null && _dtos.Count() != 0 )
{
    <MudTable Items="_dtos">
        <HeaderContent>
            <MudTh>Nr</MudTh>
            <MudTh>Link</MudTh>
            <MudTh>Items</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr">@context.Id</MudTd>
            <MudTd DataLabel="Link"><a href="@context.Link">@context.Link</a></MudTd>
            <MudTd DataLabel="Link">@if(context.Items!=null) @string.Join(", ",context.Items)</MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool coerceValue;
    private string? value1;
    private string? value2;
    private string[] heroes = new HeroCatalogue().heroes;

    List<DotaTrackerDTO>? _dtos;

    public async void Parse()
    {
        _dtos = await Parser(value1!,value2!);
        StateHasChanged();
    }

    private async Task<IEnumerable<string>> Search1(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(1);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return heroes;
        return heroes.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> Search2(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(1);

        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
            return new string[0];
        return heroes.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}
